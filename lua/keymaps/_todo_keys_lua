-- local wk = require("which-key")

--stylua: ignore start
wk.add({

  { "<leader>r", group = "RunCode" },
  { "<leader>rr",  mode = { "n" }, "<Cmd>RunCode<CR>",        desc = "RunCode",     noremap = true, silent = false },
  { "<leader>rf",  mode = { "n" }, "<Cmd>RunFile tab<CR>",    desc = "RunFile tab", noremap = true, silent = false },
  { "<leader>rp",  mode = { "n" }, "<Cmd>RunProject tab<CR>", desc = "RunProject",  noremap = true, silent = false },
  { "<leader>rc",  mode = { "n" }, "<Cmd>RunClose<CR>",       desc = "RunClose",    noremap = true, silent = false },
  { "<leader>ref", mode = { "n" }, "<Cmd>CRFiletype<CR>",     desc = "CRFiletype",  noremap = true, silent = false },
  { "<leader>rep", mode = { "n" }, "<Cmd>CRProjects<CR>",     desc = "CRProjects",  noremap = true, silent = false },

  { "<leader>s", group = "Surround" },
  { "<leader>ss", mode = { "n" }, "<Plug>(nvim-surround-normal-cur)",      desc = "surround normal cur",      noremap = true, silent = false },
  { "<leader>sS", mode = { "n" }, "<Plug>(nvim-surround-normal)",          desc = "surround normal",          noremap = true, silent = false },
  { "<leader>sd", mode = { "n" }, "<Plug>(nvim-surround-delete)",          desc = "surround delete",          noremap = true, silent = false },
  { "<leader>sl", mode = { "n" }, "<Plug>(nvim-surround-normal-cur-line)", desc = "surround normal cur line", noremap = true, silent = false },
  { "<leader>sL", mode = { "n" }, "<Plug>(nvim-surround-normal-line)",     desc = "surround normal line",     noremap = true, silent = false },
  { "<leader>sr", mode = { "n" }, "<Plug>(nvim-surround-change)",          desc = "surround change",          noremap = true, silent = false },
  { "<leader>sR", mode = { "n" }, "<Plug>(nvim-surround-change-line)",     desc = "surround change line",     noremap = true, silent = false },
  { "<leader>sv", mode = { "x" }, "<Plug>(nvim-surround-visual-line)",     desc = "surround visual line",     noremap = true, silent = false },
  { "<leader>sV", mode = { "x" }, "<Plug>(nvim-surround-visual)",          desc = "surround visual",          noremap = true, silent = false },
  -- { "setket",     mode = { "i" }, "<Plug>(nvim-surround-insert)",          desc = "surround insert",          noremap = true, silent = false },
  -- { "setket",     mode = { "i" }, "<Plug>(nvim-surround-insert-line)",     desc = "surround insert line",     noremap = true, silent = false },

  { "<leader>l", group = "Lsp" },
  { "<leader>lo", mode = { "n" }, "<Cmd>Outline<CR>",                     desc = "toggle outline", noremap = true, silent = false },
  { "<leader>lr", mode = { "n" }, ":lua Snacks.rename.rename_file()<CR>", desc = "Rename File",    noremap = true, silent = false },
  { "<leader>lj", mode = { "n" }, ":lua Snacks.scope.jump()<CR>",         desc = "Scope Jump",     noremap = true, silent = false },
  { "<leader>lt", mode = { "n" }, ":lua Snacks.scope.textobject()<CR>",   desc = "Scope Textobject",    noremap = true, silent = false },

  -- keymaps = {
  -- -- TODO: oil key mapping
  --   ["g?"] = { "actions.show_help", mode = "n" },
  --   ["<CR>"] = "actions.select",
  --   ["<C-s>"] = { "actions.select", opts = { vertical = true } },
  --   ["<C-h>"] = { "actions.select", opts = { horizontal = true } },
  --   ["<C-t>"] = { "actions.select", opts = { tab = true } },
  --   ["<C-p>"] = "actions.preview",
  --   ["<C-c>"] = { "actions.close", mode = "n" },
  --   ["<C-l>"] = "actions.refresh",
  --   ["-"] = { "actions.parent", mode = "n" },
  --   ["_"] = { "actions.open_cwd", mode = "n" },
  --   ["`"] = { "actions.cd", mode = "n" },
  --   ["~"] = { "actions.cd", opts = { scope = "tab" }, mode = "n" },
  --   ["gs"] = { "actions.change_sort", mode = "n" },
  --   ["gx"] = "actions.open_external",
  --   ["g."] = { "actions.toggle_hidden", mode = "n" },
  --   ["g\\"] = { "actions.toggle_trash", mode = "n" },
  -- },


  -- TODO: ...
  -- keys = {
  --   {
  --     "<leader>xx",
  --     "<cmd>Trouble diagnostics toggle<cr>",
  --     desc = "Diagnostics (Trouble)",
  --   },
  --   {
  --     "<leader>xX",
  --     "<cmd>Trouble diagnostics toggle filter.buf=0<cr>",
  --     desc = "Buffer Diagnostics (Trouble)",
  --   },
  --   {
  --     "<leader>cs",
  --     "<cmd>Trouble symbols toggle focus=false<cr>",
  --     desc = "Symbols (Trouble)",
  --   },
  --   {
  --     "<leader>cl",
  --     "<cmd>Trouble lsp toggle focus=false win.position=right<cr>",
  --     desc = "LSP Definitions / references / ... (Trouble)",
  --   },
  --   {
  --     "<leader>xL",
  --     "<cmd>Trouble loclist toggle<cr>",
  --     desc = "Location List (Trouble)",
  --   },
  --   {
  --     "<leader>xQ",
  --     "<cmd>Trouble qflist toggle<cr>",
  --     desc = "Quickfix List (Trouble)",
  --   },
  -- },

  -- :TodoTelescope cwd=~/projects/foobar
  -- :TodoTelescope keywords=TODO,FIX
  -- Trouble todo filter = {tag = {TODO,FIX,FIXME}}
  -- vim.keymap.set("n", "]t", function()
  --   require("todo-comments").jump_next()
  -- end, { desc = "Next todo comment" })

  -- vim.keymap.set("n", "[t", function()
  --   require("todo-comments").jump_prev()
  -- end, { desc = "Previous todo comment" })

  -- -- You can also specify a list of valid jump keywords

  -- vim.keymap.set("n", "]t", function()
  --   require("todo-comments").jump_next({keywords = { "ERROR", "WARNING" }})
  -- end, { desc = "Next error/warning todo comment" })
})
-- stylua: ignore end
