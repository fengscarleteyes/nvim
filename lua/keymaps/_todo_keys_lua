-- local wk = require("which-key")

--stylua: ignore start
wk.add({

  -- keymaps = {
  -- -- TODO: oil key mapping
  --   ["g?"] = { "actions.show_help", mode = "n" },
  --   ["<CR>"] = "actions.select",
  --   ["<C-s>"] = { "actions.select", opts = { vertical = true } },
  --   ["<C-h>"] = { "actions.select", opts = { horizontal = true } },
  --   ["<C-t>"] = { "actions.select", opts = { tab = true } },
  --   ["<C-p>"] = "actions.preview",
  --   ["<C-c>"] = { "actions.close", mode = "n" },
  --   ["<C-l>"] = "actions.refresh",
  --   ["-"] = { "actions.parent", mode = "n" },
  --   ["_"] = { "actions.open_cwd", mode = "n" },
  --   ["`"] = { "actions.cd", mode = "n" },
  --   ["~"] = { "actions.cd", opts = { scope = "tab" }, mode = "n" },
  --   ["gs"] = { "actions.change_sort", mode = "n" },
  --   ["gx"] = "actions.open_external",
  --   ["g."] = { "actions.toggle_hidden", mode = "n" },
  --   ["g\\"] = { "actions.toggle_trash", mode = "n" },
  -- },


  -- TODO: ...
  -- keys = {
  --   {
  --     "<leader>xx",
  --     "<cmd>Trouble diagnostics toggle<cr>",
  --     desc = "Diagnostics (Trouble)",
  --   },
  --   {
  --     "<leader>xX",
  --     "<cmd>Trouble diagnostics toggle filter.buf=0<cr>",
  --     desc = "Buffer Diagnostics (Trouble)",
  --   },
  --   {
  --     "<leader>cs",
  --     "<cmd>Trouble symbols toggle focus=false<cr>",
  --     desc = "Symbols (Trouble)",
  --   },
  --   {
  --     "<leader>cl",
  --     "<cmd>Trouble lsp toggle focus=false win.position=right<cr>",
  --     desc = "LSP Definitions / references / ... (Trouble)",
  --   },
  --   {
  --     "<leader>xL",
  --     "<cmd>Trouble loclist toggle<cr>",
  --     desc = "Location List (Trouble)",
  --   },
  --   {
  --     "<leader>xQ",
  --     "<cmd>Trouble qflist toggle<cr>",
  --     desc = "Quickfix List (Trouble)",
  --   },
  -- },

  -- :TodoTelescope cwd=~/projects/foobar
  -- :TodoTelescope keywords=TODO,FIX
  -- Trouble todo filter = {tag = {TODO,FIX,FIXME}}
  -- vim.keymap.set("n", "]t", function()
  --   require("todo-comments").jump_next()
  -- end, { desc = "Next todo comment" })

  -- vim.keymap.set("n", "[t", function()
  --   require("todo-comments").jump_prev()
  -- end, { desc = "Previous todo comment" })

  -- -- You can also specify a list of valid jump keywords

  -- vim.keymap.set("n", "]t", function()
  --   require("todo-comments").jump_next({keywords = { "ERROR", "WARNING" }})
  -- end, { desc = "Next error/warning todo comment" })
})
-- stylua: ignore end
